import tkinter as tk
from tkinter import ttk, messagebox
import json
import os
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

DATA_FILE = "keuangan.json"

# --------- Data Handler ---------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return []

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

# --------- Aplikasi ---------
class KeuanganApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üìä Aplikasi Keuangan Pribadi")
        self.root.geometry("800x600")

        self.data = load_data()
        self.setup_ui()
        self.refresh_table()
        self.update_ringkasan()

    def setup_ui(self):
        frame_top = tk.Frame(self.root)
        frame_top.pack(pady=10, padx=10, fill="x")

        tk.Label(frame_top, text="Tanggal (YYYY-MM-DD):").grid(row=0, column=0)
        self.entry_tanggal = tk.Entry(frame_top)
        self.entry_tanggal.grid(row=0, column=1)
        self.entry_tanggal.insert(0, datetime.today().strftime('%Y-%m-%d'))

        tk.Label(frame_top, text="Kategori:").grid(row=0, column=2)
        self.entry_kategori = tk.Entry(frame_top)
        self.entry_kategori.grid(row=0, column=3)

        tk.Label(frame_top, text="Tipe:").grid(row=1, column=0)
        self.combo_tipe = ttk.Combobox(frame_top, values=["Pemasukan", "Pengeluaran"])
        self.combo_tipe.grid(row=1, column=1)
        self.combo_tipe.current(0)

        tk.Label(frame_top, text="Jumlah:").grid(row=1, column=2)
        self.entry_jumlah = tk.Entry(frame_top)
        self.entry_jumlah.grid(row=1, column=3)

        self.btn_tambah = tk.Button(frame_top, text="‚ûï Tambah", command=self.tambah_transaksi)
        self.btn_tambah.grid(row=0, column=4, rowspan=2, padx=5)

        frame_table = tk.Frame(self.root)
        frame_table.pack(fill="both", expand=True, padx=10)

        columns = ("tanggal", "kategori", "tipe", "jumlah")
        self.tree = ttk.Treeview(frame_table, columns=columns, show="headings")
        for col in columns:
            self.tree.heading(col, text=col.capitalize())
            self.tree.column(col, anchor="center")
        self.tree.pack(fill="both", expand=True)

        frame_btn = tk.Frame(self.root)
        frame_btn.pack(pady=5)

        self.btn_hapus = tk.Button(frame_btn, text="üóëÔ∏è Hapus", command=self.hapus_transaksi)
        self.btn_hapus.pack(side="left", padx=5)

        self.btn_grafik = tk.Button(frame_btn, text="üìà Tampilkan Grafik", command=self.tampilkan_grafik)
        self.btn_grafik.pack(side="left", padx=5)

        frame_ringkasan = tk.LabelFrame(self.root, text="Ringkasan")
        frame_ringkasan.pack(fill="x", padx=10, pady=10)

        self.label_pemasukan = tk.Label(frame_ringkasan, text="Total Pemasukan: Rp 0")
        self.label_pemasukan.pack(anchor="w")

        self.label_pengeluaran = tk.Label(frame_ringkasan, text="Total Pengeluaran: Rp 0")
        self.label_pengeluaran.pack(anchor="w")

        self.label_saldo = tk.Label(frame_ringkasan, text="Saldo: Rp 0", font=("Arial", 12, "bold"))
        self.label_saldo.pack(anchor="w")

    def tambah_transaksi(self):
        tanggal = self.entry_tanggal.get().strip()
        kategori = self.entry_kategori.get().strip()
        tipe = self.combo_tipe.get()
        jumlah = self.entry_jumlah.get().strip()

        if not tanggal or not kategori or not jumlah:
            messagebox.showwarning("Peringatan", "Semua kolom harus diisi.")
            return

        try:
            datetime.strptime(tanggal, '%Y-%m-%d')
            jumlah = float(jumlah)
        except ValueError:
            messagebox.showerror("Error", "Tanggal atau jumlah tidak valid.")
            return

        self.data.append({
            "tanggal": tanggal,
            "kategori": kategori,
            "tipe": tipe,
            "jumlah": jumlah
        })
        save_data(self.data)
        self.refresh_table()
        self.update_ringkasan()

        self.entry_kategori.delete(0, tk.END)
        self.entry_jumlah.delete(0, tk.END)

    def hapus_transaksi(self):
        selected = self.tree.selection()
        if not selected:
            return
        idx = int(selected[0])
        if messagebox.askyesno("Konfirmasi", "Yakin ingin menghapus transaksi ini?"):
            del self.data[idx]
            save_data(self.data)
            self.refresh_table()
            self.update_ringkasan()

    def refresh_table(self):
        self.tree.delete(*self.tree.get_children())
        for idx, item in enumerate(self.data):
            self.tree.insert("", "end", iid=idx, values=(item['tanggal'], item['kategori'], item['tipe'], f"Rp {item['jumlah']:.2f}"))

    def update_ringkasan(self):
        total_in = sum(item['jumlah'] for item in self.data if item['tipe'] == 'Pemasukan')
        total_out = sum(item['jumlah'] for item in self.data if item['tipe'] == 'Pengeluaran')
        saldo = total_in - total_out

        self.label_pemasukan.config(text=f"Total Pemasukan: Rp {total_in:,.2f}")
        self.label_pengeluaran.config(text=f"Total Pengeluaran: Rp {total_out:,.2f}")
        self.label_saldo.config(text=f"Saldo: Rp {saldo:,.2f}")

    def tampilkan_grafik(self):
        pengeluaran = {}
        for item in self.data:
            if item['tipe'] == 'Pengeluaran':
                pengeluaran[item['kategori']] = pengeluaran.get(item['kategori'], 0) + item['jumlah']

        if not pengeluaran:
            messagebox.showinfo("Info", "Belum ada data pengeluaran.")
            return

        fig, ax = plt.subplots(figsize=(5, 4))
        kategori = list(pengeluaran.keys())
        jumlah = list(pengeluaran.values())
        ax.pie(jumlah, labels=kategori, autopct='%1.1f%%', startangle=140)
        ax.set_title('Pengeluaran per Kategori')

        top = tk.Toplevel(self.root)
        top.title("Grafik Pengeluaran")
        canvas = FigureCanvasTkAgg(fig, master=top)
        canvas.get_tk_widget().pack()
        canvas.draw()

if __name__ == '__main__':
    root = tk.Tk()
    app = KeuanganApp(root)
    root.mainloop()
